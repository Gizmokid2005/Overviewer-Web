# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.process.factory import BuildFactory
from buildbot.config import BuilderConfig
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import *
from buildbot.changes import filter
from buildbot.status.results import SUCCESS
from buildbot.process.buildstep import BuildStep
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.steps.transfer import DirectoryUpload, FileDownload, FileUpload, StringDownload
from buildbot.steps.slave import SetPropertiesFromEnv
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import Interpolate, Property, renderer
from buildbot.process.builder import enforceChosenSlave
from buildbot import locks
from twisted.internet import defer
from twisted.python import log
import buildbot.status.html as html
from buildbot.status import words
import buildbot.status.web.authz as authz
import stat
import os
import os.path
import hashlib
import time
import hmac
import uuid
import itsdangerous

# useful constants
DEFAULT_REPOSITORY = "https://github.com/overviewer/Minecraft-Overviewer"
EXMAPLE_REPOSITORY = "https://github.com/overviewer/Minecraft-Overviewer-Addons"
DEFAULT_CLIENT_JAR_VER = "1.10"
UPLOAD_DEST = "/data/buildbot/uploads"
UPLOAD_URL = "http://overviewer.org/builds"
DEBIAN_REPO = "/data/buildbot/repos/debian"
RPM_REPO = "/data/buildbot/repos/rpm"
RENDER_UPLOAD_DEST = "/data/buildbot/renders"
RENDER_UPLOAD_URL = "http://overviewer.org/renders"
EXMAPLE_PATH = "/data/buildbot/example"

# confidentials
POSTGRES_PASSWORD = os.environ['POSTGRES_PASSWORD']
BUILDBOT_SECRET = os.environ['BUILDBOT_SECRET']
FLASK_SECRET = os.environ['FLASK_SECRET']

# don't leak secrets, only leave whitelisted envs
for k in list(os.environ.keys()):
    if not k in ['PATH', 'PWD', 'SHLVL', 'GPG_AGENT_INFO']:
        del os.environ[k]

def gen_pw(name):
    return hmac.new(BUILDBOT_SECRET, name, hashlib.sha512).hexdigest()

# our config object
c = BuildmasterConfig = {}

c['title'] = "Minecraft Overviewer"
c['titleURL'] = "http://overviewer.org/"

c['protocols'] = {'pb': {'port': 9989}}

class OverviewerAuthz(authz.Authz):
    flask_signer = itsdangerous.URLSafeTimedSerializer(
        FLASK_SECRET,
        salt='cookie-session',
        signer_kwargs=dict(
            key_derivation='hmac',
            digest_method=hashlib.sha1,
        ),
    )

    def __init__(self, default_action=False, httpLoginUrl=False, **kwargs):
        super(OverviewerAuthz, self).__init__(default_action=default_action, auth=None, useHttpHeader=True, httpLoginUrl=httpLoginUrl, **kwargs)
    
    def get_flask_session(self, request):
        try:
            return request._flask_session
        except AttributeError:
            pass

        session = request.received_cookies.get('session', None)
        if not session:
            request._flask_session = None
            return None
        try:
            # attempt to decode session
            s = self.flask_signer.loads(session)
            request._flask_session = s
            return s
        except Exception:
            request._flask_session = None
            return None

    def authenticated(self, request):
        s = self.get_flask_session(request)
        if s and s.get('logged_in') and s.get('developer'):
            return True
        return False

    def getUsername(self, request):
        s = self.get_flask_session(request)
        if s and s.get('logged_in') and s.get('user'):
            return s['user']
        return '<unknown>'

    def getUsernameHTML(self, request):
        s = self.get_flask_session(request)
        if s and s.get('logged_in') and s.get('user'):
            return '<a href="https://github.com/%s">%s</a>' % (s['user'], s['user'])
        return '&lt;unknown&gt;'

    def getUsernameFull(self, request):
        return self.getUsername(request)

    def getPassword(self, request):
        return '<no-password>'

    def actionAllowed(self, action, request, *args):
        if action not in self.knownActions:
            raise KeyError("unknown action")
        cfg = self.config.get(action, False)
        if cfg:
            if cfg == 'auth' or callable(cfg):
                if not self.authenticated(request):
                    return defer.succeed(False)
                if callable(cfg) and not cfg(self.getUsername(request), *args):
                    return defer.succeed(False)
                return defer.succeed(True)
        return defer.succeed(cfg)

    def login(self, request):
        pass

    def logout(self, request):
        pass

authz_cfg = OverviewerAuthz(
    httpLoginUrl="http://overviewer.org/login?next=/build/",
    gracefulShutdown = False,
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)

c['buildbotURL'] = 'http://overviewer.org/build/'
c['status'] = [
    html.WebStatus(
        http_port=8010,
        authz=authz_cfg,
        change_hook_dialects={'github': True},
    ),
    words.IRC("irc.freenode.net", "overviewer-build",
              useColors=True,
              allowForce=False,
              notify_events={
                  'failure': 1,
                  'exception': 1,
                  'failureToSuccess': 1,
                  'exceptionToSuccess': 1,
              },
              channels=[{'channel': '#overviewer'}],
    ),
]

c['db'] = {
    'db_url': 'postgresql://postgres:' + POSTGRES_PASSWORD + '@postgres/bbmaster',
}

# high-level slave list
# slaves[name] = [... list of builders ...]
slaves = {
    'diax-wheezy-64': ['src', 'render', 'deb64'],
    'diax-wheezy-32': ['src', 'render', 'deb32'],
    'diax-fc21-64': ['el6-32', 'el6-64', 'fc19-32', 'fc19-64'],
    'pironic-win-32': ['win32'],
    'pironic-win-64': ['win64'],
    'diax-centos7-64': ['centos7-64'],
}

# all the builds that should fire automatically
ALL_BUILDERS = ['src', 'render', 'win32', 'win64', 'deb32', 'deb64', 'el6-32', 'el6-64', 'fc19-32', 'fc19-64']

c['slaves'] = []
builders_to_slaves = {}
for name, builders in slaves.items():
    c['slaves'].append(BuildSlave(name, gen_pw(name)))
    for builder in builders:
        builders_to_slaves.setdefault(builder, list()).append(name)

c['schedulers'] = [
    SingleBranchScheduler(
        name='Overviewer Master Scheduler',
        change_filter=filter.ChangeFilter(branch='master'),
        treeStableTimer=None,
        builderNames=ALL_BUILDERS,
    ),
    ForceScheduler(
        name="Overviewer Force Scheduler",
        branch=StringParameter(name="branch", default="master"),
        repository=StringParameter(name="repository", default=DEFAULT_REPOSITORY, size=80),
        project=FixedParameter(name="project", choices=["overviewer"], default="overviewer"),
        properties=[BuildslaveChoiceParameter()],
        builderNames=ALL_BUILDERS,
    ),
    ForceScheduler(
        name="Overviewer Renderer",
        branch=StringParameter(name="branch", default="master"),
        repository=StringParameter(name="repository", default=DEFAULT_REPOSITORY, size=80),
        project=FixedParameter(name="project", choices=["overviewer"], default="overviewer"),
        reason=FixedParameter(name="reason", default="Rendering"),
        properties=[
            BuildslaveChoiceParameter(),
            StringParameter(name="client_jar_version", label="Textures Version", default=DEFAULT_CLIENT_JAR_VER),
            StringParameter(name="exmaple_commit", label="Exmaple Commit", default="master"),
            ChoiceStringParameter(name="rendermode", label="Render Mode", choices=[
                "normal",
                "lighting",
                "smooth_lighting",
                "night",
                "smooth_night",
            ], default="smooth_lighting"),
            ChoiceStringParameter(name="procs", label="Processes", choices=[
                "1", "2", "4",
            ], default="2"),
        ],
        builderNames=["render"],
    ),
]

c['builders'] = []

# high-level builder maker
# @builder(builder_config_key=...)
# def src():
#     yield BuildStep({kwargs})
def builder(**configExtra):
    def wrapper(f):
        name = f.__name__.replace('_', '-')
        factory = BuildFactory()
        def runstep(step):
            try:
                steps = iter(step)
                for step in steps:
                    runstep(step)
            except TypeError:
                info = step._factory
                stepkwargs = dict(
                    haltOnFailure = True,
                )
                stepkwargs.update(info.kwargs)
                step = info.factory(*info.args, **stepkwargs)
                factory.addStep(step)

        runstep(f())
        
        config = dict(
            name = name,
            canStartBuild=enforceChosenSlave,
            slavenames=builders_to_slaves.get(name, []),
            factory = factory,
        )
        config.update(configExtra)
        builder = BuilderConfig(**config)
        c['builders'].append(builder)
        return f
    return wrapper

class SetBuildProperty(BuildStep):
    """ Set a build property as a step """

    renderables = ['property', 'value']

    def __init__(self, name = 'buildproperty', property=None, value=None, **kwargs):
        BuildStep.__init__(self, name=name, **kwargs)
        self.property = property
        self.value = value

    def start(self):
        self.setProperty(self.property, self.value, self.name)
        self.finished(SUCCESS)

def extract_stdout(key):
    def extract(rc, stdout, stderr):
        return {key: stdout.strip()}
    return extract

def upload_dest(fext):
    def _masterdest(props):
        project = props.getProperty('project')
        version = props.getProperty('version')
        builder = props.getProperty('buildername')
        buildnum = props.getProperty('buildnumber')
        revision = props.getProperty('got_revision')
        if any(x is None for x in [project, version, builder, buildnum, revision]):
            raise RuntimeError("need project, version, buildername, buildnumber, and got_revision properties set")
        revision = revision[:7]
        basename = '%s-%s-%s.%s-%s%s' % (project, version, builder, buildnum, revision, fext)
        return os.path.join(UPLOAD_DEST, basename)
    return renderer(_masterdest)

def upload_url(fext):
    return Interpolate(UPLOAD_URL + "/%(prop:buildername)s/%(prop:buildnumber)s/%(prop:project)s-%(prop:version)s" + fext)

def checkout(python="python2", git="git", workdir=None):
    yield Git(repourl=Property('repository'), mode='full', method='fresh', name='checkout', workdir=workdir)
    yield ShellCommand(command=[git, "fetch", "--tags"], name="fetch tags", workdir=workdir)
    yield SetPropertyFromCommand(command=[python, "setup.py", "--version"], extract_fn=extract_stdout('version'), name="get version", workdir=workdir)
    yield SetPropertyFromCommand(command=[git, "describe", "--tags"], extract_fn=extract_stdout('desc'), name="get desc", workdir=workdir)

    @renderer
    def is_release_build(props):
        return props.getProperty("branch", "") == "master" and props.getProperty("repository", "") == DEFAULT_REPOSITORY
    yield SetBuildProperty(property='release_build', value=is_release_build, name="set release_build")

def is_release_build(step):
    return step.build.getProperty('release_build')

def upload(src, fext, **kwargs):
    yield FileUpload(slavesrc=src, masterdest=upload_dest(fext), url=upload_url(fext), name="upload", mode=0644, **kwargs)

@builder()
def src():
    yield checkout()
    yield ShellCommand(command=["python2", "setup.py", "sdist"], name="sdist")
    yield upload(Interpolate("dist/Minecraft-Overviewer-%(prop:version)s.tar.gz"), ".tar.gz")

def windows():
    sphinxbuild = r"C:\Python27\Scripts\sphinx-build.exe"
    pythonexe = r"C:\Python27\python.exe"
    zipper = r"C:\Program Files\7-Zip\7z.exe"

    yield checkout(python=pythonexe)
    yield ShellCommand(command=[pythonexe, "setup.py", "build"], name="build")
    yield ShellCommand(command=[pythonexe, "setup.py", "py2exe"], name="py2exe")
    yield ShellCommand(command=[sphinxbuild, "-b", "html", "docs", r"dist\docs"], name="sphinx")
    yield ShellCommand(command=[zipper, "a", r"..\dist.zip", "."], workdir=r"build\dist", name="zip")
    yield upload("dist.zip", ".zip")

@builder(env={'PIL_INCLUDE_DIR': r"C:\devel\Imaging-1.1.7\libImaging"})
def win32():
    yield windows()

@builder(env={'PIL_INCLUDE_DIR': r"C:\devel\PIL-1.1.7\libImaging", 'DISTUTILS_USE_SDK': "1", 'MSSdk': "1"})
def win64():
    yield windows()

@renderer
def debian_build_changelog(props):
    version = props.getProperty("version")
    desc = props.getProperty("desc")
    now = time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime())
    s = """minecraft-overviewer (%s-0~overviewer1) unstable; urgency=low

  * Automatically generated from Git: %s

 -- Aaron Griffith <agrif@overviewer.org>  %s""" % (version, desc, now)
    return s

deb_repo_lock = locks.MasterLock("deb_repo_lock")
def debian():
    yield checkout()
    yield ShellCommand(command=["python", "setup.py", "build"], name="build")

    # move and untar our control files
    yield FileDownload(mastersrc="debian.tar", slavedest="debian/all.tar", name="transfer control files")
    yield ShellCommand(command=["tar", "--no-same-owner", "-xf", "all.tar"], workdir="build/debian", name="untar control files")

    # note all.tar does not contain the changelog, it's generated here
    yield StringDownload(debian_build_changelog, slavedest="debian/changelog", name="create changelog")

    # build and upload
    yield ShellCommand(command=['debuild', '-i', '-us', '-uc', '-b'], name="deb build")
    yield SetPropertyFromCommand(command="ls -1 *.deb", workdir=".", property="debfile", name="get deb filename")
    yield upload(Property("debfile"), ".deb", workdir="")
    yield ShellCommand(command="rm -f *.deb *.changes *.build", workdir=".", name="clean up built files")

    # sign the uploaded package
    # note the argument to -g is *intentionally* one string
    yield MasterShellCommand(command=["dpkg-sig", "-g", "--use-agent --batch --no-tty", "--sign", "builder", upload_dest(".deb")], name="sign package", description="signing", descriptionDone="signed")

    # repo nonsense, use symlinks
    yield MasterShellCommand(command=["ln", "-f", upload_dest(".deb"), DEBIAN_REPO + "/files/"], name="link into repo", doStepIf=is_release_build, description="linking to repo", descriptionDone="linked to repo")
    yield MasterShellCommand(command=["make", "-C", DEBIAN_REPO], name="rebuild repo", doStepIf=is_release_build, locks=[deb_repo_lock.access('exclusive')], description="rebuilding repo", descriptionDone="rebuilt repo")

@builder()
def deb32():
    yield debian()

@builder()
def deb64():
    yield debian()

rpm_build_lock = locks.SlaveLock("rpm_build_lock", maxCount=1)
rpm_repo_lock = locks.MasterLock("rpm_repo_lock")

def rpm(rpmbase, mockbase, mockconfig, rpmarch, mockarch):
    yield checkout(workdir="build/Minecraft-Overviewer")

    # move and untar our control files
    yield FileDownload(mastersrc="rpm.tar", slavedest="rpm/all.tar", name="transfer control files")
    yield ShellCommand(command=["tar", "--no-same-owner", "-xf", "all.tar"], workdir="build/rpm", name="untar control files")

    # build source tarball
    yield SetPropertiesFromEnv(variables=["HOME"])
    yield ShellCommand(command=["mkdir", "-p", Interpolate("%(prop:HOME)s/rpmbuild/SOURCES/")], workdir="build", name="ensure SOURCES exists")
    yield ShellCommand(command=["tar", "-czf", Interpolate("%(prop:HOME)s/rpmbuild/SOURCES/Minecraft-Overviewer-%(prop:version)s.tar.gz"), "Minecraft-Overviewer"], workdir="build", name="create source tarball")

    # replace {VERSION} string in spec file
    yield ShellCommand(command=['sed', '-i', Interpolate('s/{VERSION}/%(prop:version)s/'), "rpm/" + rpmbase + "/Minecraft-Overviewer.spec"], name="replace version in spec file")

    # build source RPM
    if rpmbase == "el5":
        yield ShellCommand(command=['rpmbuild', '-bs', '--define', 'dist .' + rpmbase, '--define', '_source_filedigest_algorithm md5', 'rpm/' + rpmbase + '/Minecraft-Overviewer.spec'], name='create source rpm')
    else:
        yield ShellCommand(command=['rpmbuild', '-bs', '--define', 'dist .' + rpmbase, 'rpm/' + rpmbase + '/Minecraft-Overviewer.spec'], name="create source rpm")

    # build RPM
    srpm = Interpolate("%(prop:HOME)s/rpmbuild/SRPMS/Minecraft-Overviewer-%(prop:version)s-1." + rpmbase + ".src.rpm")
    yield ShellCommand(command=['/usr/bin/mock', '-r', mockconfig + '-' + rpmarch, srpm], name="build RPM")

    # upload
    yield upload(Interpolate('/var/lib/mock/' + mockconfig + '-' + rpmarch + '/result/Minecraft-Overviewer-%(prop:version)s-1.' + mockbase + '.' + mockarch + '.rpm'), '.rpm')
    yield ShellCommand(command="rm -rf rpm", workdir="build", name="clean up control files")

    # sign the uploaded package
    yield MasterShellCommand(command=["/root/rpmsign.sh", upload_dest(".rpm")], name="sign package", description="signing", descriptionDone="signed")

    # link the new rpm into the repo
    system_map = {'el5': '5', 'el6': '6', 'fc19': '19'}
    rpm_package_area = RPM_REPO + "/" + system_map[rpmbase] + "/" + rpmarch + "/packages"

    yield MasterShellCommand(command=["ln", "-f", upload_dest(".rpm"), rpm_package_area], name="link into repo", doStepIf=is_release_build, description="linking into repo", descriptionDone="linked into repo")
    yield MasterShellCommand(command=["make", "-C", RPM_REPO], name="rebuild repo", doStepIf=is_release_build, locks=[rpm_repo_lock.access('exclusive')], description="rebuilding repo", descriptionDone="rebuilt repo")

@builder(locks=[rpm_build_lock.access('exclusive')])
def fc19_64():
    yield rpm('fc19', 'fc19', 'fedora-19', 'x86_64', 'x86_64')

@builder(locks=[rpm_build_lock.access('exclusive')])
def el6_64():
    yield rpm('el6', 'el6', 'epel-6', 'x86_64', 'x86_64')

#@builder(locks=[rpm_build_lock.access('exclusive')])
#def el5_64():
#    yield rpm('el5', 'el5.centos', 'epel-5', 'x86_64', 'x86_64')

@builder(locks=[rpm_build_lock.access('exclusive')])
def fc19_32():
    yield rpm('fc19', 'fc19', 'fedora-19', 'i386', 'i686')

@builder(locks=[rpm_build_lock.access('exclusive')])
def el6_32():
    yield rpm('el6', 'el6', 'epel-6', 'i386', 'i686')

#@builder(locks=[rpm_build_lock.access('exclusive')])
#def el5_32():
#    yield rpm('el5', 'el5.centos', 'epel-5', 'i386', 'i386') # Probably unique on purpose

@builder(locks=[rpm_build_lock.access('exclusive')])
def centos7_64():
    yield rpm('cos7', 'cos7', 'centos-7', 'x86_64', 'x86_64')

class RenderDirUpload(DirectoryUpload):
    def __init__(self, *args, **kwargs):
        kwargs.update({'masterdest': RENDER_UPLOAD_DEST, 'url': RENDER_UPLOAD_URL})
        DirectoryUpload.__init__(self, *args, **kwargs)

    def start(self):
        uid = str(uuid.uuid4())
        self.masterdest = RENDER_UPLOAD_DEST + "/" + uid
        self.url = RENDER_UPLOAD_URL + "/" + uid
        self.setProperty("render_upload", self.masterdest, self.name)
        return DirectoryUpload.start(self)

    def finished(self, result):
        r = DirectoryUpload.finished(self, result)
        log.msg("RenderDirUpload correcting permissions on %r" % self.masterdest)

        DIRPERM = (stat.S_IRUSR | stat.S_IXUSR | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
        FILEPERM = (stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)

        os.chmod(self.masterdest, DIRPERM)
        for root, dirs, files in os.walk(self.masterdest):
            for d in [os.path.join(root, dd) for dd in dirs]:
                os.chmod(d, DIRPERM)
            for d in [os.path.join(root, dd) for dd in files]:
                os.chmod(d, FILEPERM)

        return r

exmaple_lock = locks.MasterLock("exmaple_lock")
@builder()
def render():
    EXMAPLE_COMMIT = Property('exmaple_commit', default='master')
    CLIENT_JAR_VERSION = Property('client_jar_version', default=DEFAULT_CLIENT_JAR_VER)
    CLIENT_JAR_FETCH = Interpolate('wget -N https://s3.amazonaws.com/Minecraft.Download/versions/%(kw:ver)s/%(kw:ver)s.jar -P ~/.minecraft/versions/%(kw:ver)s/', ver=CLIENT_JAR_VERSION)
    RENDERMODE = Property('rendermode', default='smooth_lighting')

    yield checkout()
    yield ShellCommand(command=["git", "clone", EXMAPLE_REPOSITORY, "maprepo"], name='get exmaple')
    yield ShellCommand(command=["git", "checkout", EXMAPLE_COMMIT], workdir='build/maprepo', name='checkout exmaple commit')
    yield ShellCommand(command=CLIENT_JAR_FETCH, name="fetch client jar")
    yield ShellCommand(command=["python2", "setup.py", "build"], name="build")
    yield ShellCommand(command=["python2", "overviewer.py", "--verbose", "--check-terrain"], name="check terrain", haltOnFailure=False)
    yield ShellCommand(command=["python2", "overviewer.py", "--verbose", "-p", Property("procs", default="2"), Interpolate("--rendermode=%(kw:rmode)s", rmode=RENDERMODE), "maprepo/exmaple", "output_render"], name="render")
    yield RenderDirUpload(slavesrc="output_render", compress="bz2", name="upload")

    def is_exmaple(step):
        def has_val(name, val):
            return step.build.getProperty(name) in [None, val]
        return step.build.getProperty('release_build') and has_val('rendermode', 'smooth_lighting') and has_val('client_jar_version', DEFAULT_CLIENT_JAR_VER) and has_val('exmaple_commit', 'master')
    yield MasterShellCommand(command=Interpolate("rm -f " + EXMAPLE_PATH + " && ln -s %(prop:render_upload)s " + EXMAPLE_PATH), name="link exmaple", doStepIf=is_exmaple, locks=[exmaple_lock.access('exclusive')], description="linking exmaple", descriptionDone="linked exmaple")
